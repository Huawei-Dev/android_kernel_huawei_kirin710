

#ifndef __OAL_LINUX_MM_H__
#define __OAL_LINUX_MM_H__

/* ?????????????? */
/*lint -e322*/
#include <linux/slab.h>
#include <linux/hardirq.h>
#include <linux/vmalloc.h>
#include <linux/delay.h>
#ifdef _PRE_WLAN_CACHE_COHERENT_SUPPORT
#include <linux/dma-mapping.h>
#endif

/*lint +e322*/
/* ?????? */
typedef dma_addr_t oal_dma_addr;

/* ???????? */
typedef enum {
    OAL_BIDIRECTIONAL = 0,
    OAL_TO_DEVICE = 1,
    OAL_FROM_DEVICE = 2,
    OAL_NONE = 3,
} oal_data_direction;
typedef oal_uint8 oal_direction_uint8;

/*
 * ?? ?? ??  : oal_memalloc
 * ????????  : ????????????????????????????0??????Linux??????????????
 *             ????????????????????????????????????????(GFP_KERNEL??GFP_ATOMIC)??
 */
OAL_STATIC OAL_INLINE oal_void *oal_memalloc(oal_uint32 ul_size)
{
    oal_int32 l_flags = GFP_KERNEL;
    oal_void *puc_mem_space = NULL;

    /* ????????????????????????????GFP_ATOMIC */
    if (in_interrupt() || irqs_disabled() || in_atomic()) {
        l_flags = GFP_ATOMIC;
    }

    if (unlikely(ul_size == 0)) {
        return OAL_PTR_NULL;
    }

    puc_mem_space = kmalloc(ul_size, l_flags);
    if (puc_mem_space == OAL_PTR_NULL) {
        return OAL_PTR_NULL;
    }

    return puc_mem_space;
}

/*
 * ?? ?? ??  : oal_mem_dma_blockalloc
 * ????????  : ????????????DMA??????????????????????????????????????????
 */
OAL_STATIC OAL_INLINE oal_void *oal_mem_dma_blockalloc(oal_uint32 size, oal_ulong timeout)
{
    gfp_t flags = 0;
    oal_void *puc_mem_space = NULL;
    unsigned long timeout2, timeout1;

    /* ????????????????????????????GFP_ATOMIC */
    if (in_interrupt() || irqs_disabled() || in_atomic()) {
        flags |= GFP_ATOMIC;

        return kmalloc(size, flags);
    } else {
        flags |= GFP_KERNEL;
    }

    flags |= __GFP_NOWARN;

    timeout2 = jiffies + msecs_to_jiffies(timeout);     /* ms */
    timeout1 = jiffies + msecs_to_jiffies(timeout / 2); /* half */

    do {
        puc_mem_space = kmalloc(size, flags);
        if (likely(puc_mem_space != NULL)) {
            /* sucuess */
            return puc_mem_space;
        }

        if (!time_after(jiffies, timeout1)) {
            cpu_relax();
            continue; /* ???????????? */
        }

        if (!time_after(jiffies, timeout2)) {
            msleep(1);
            continue; /* ???????????????????????????? */
        } else {
            if (flags & __GFP_NOWARN) {
                /* ???????????????????????????????????? */
                flags &= ~__GFP_NOWARN;
                continue;
            } else {
                /* ???????????? */
                break;
            }
        }
    } while (1);

    return NULL;
}

/*
 * ?? ?? ??  : oal_mem_dma_blockfree
 * ????????  : ????DMA????
 */
OAL_STATIC OAL_INLINE oal_void oal_mem_dma_blockfree(oal_void *puc_mem_space)
{
    if (likely(puc_mem_space != NULL)) {
        kfree(puc_mem_space);
    }
}

/*
 * ?? ?? ??  : oal_memtry_alloc
 * ????????  : ????????????????????????????????????????????????
 *             ????????????????????????????????NULL
 */
OAL_STATIC OAL_INLINE oal_void *oal_memtry_alloc(oal_uint32 request_maxsize, oal_uint32 request_minsize,
                                                 oal_uint32 *actual_size)
{
    gfp_t flags = 0;
    oal_void *puc_mem_space = NULL;
    oal_uint32 request_size;

    if (WARN_ON(actual_size == NULL)) {
        return NULL;
    }

    *actual_size = 0;

    /* ????????????????????????????GFP_ATOMIC */
    if (in_interrupt() || irqs_disabled()) {
        flags |= GFP_ATOMIC;
    } else {
        flags |= GFP_KERNEL;
    }

    flags |= __GFP_NOWARN;

    request_size = ((request_maxsize >= request_minsize) ? request_maxsize : request_minsize);

    do {
        if (request_size <= request_minsize) {
            flags &= ~__GFP_NOWARN;
        }
        puc_mem_space = kmalloc(request_size, flags);
        if (puc_mem_space != NULL) {
            *actual_size = request_size;
            return puc_mem_space;
        }

        if (request_size <= request_minsize) {
            /* ??????SIZE????????????????NULL */
            break;
        }

        /* ????????, ???????????? */
        request_size = request_size >> 1;
        request_size = ((request_size >= request_minsize) ? request_size : request_minsize);
    } while (1);

    return NULL;
}

#ifdef _PRE_WLAN_CACHE_COHERENT_SUPPORT
/*
 * ?? ?? ??  : oal_mem_uncache_alloc
 * ????????  : ??????????(??cache)????????
 * ????????  : ????????mem??????(size),??????????????
 * ????????  : ????????????????????????????(phy addr)
 * ?? ?? ??  : ????????????????
 */
OAL_STATIC OAL_INLINE oal_void *oal_mem_uncache_alloc(oal_uint32 ul_size, oal_uint32 *pul_phy_addr)
{
    oal_int32 l_flags = GFP_KERNEL;
    oal_void *puc_mem_space = NULL;
    oal_uint32 ul_dma_real_addr;

    if (oal_unlikely(pul_phy_addr == NULL)) {
        oal_warn_on(1);
        return NULL;
    }

    /* ????????????????????????????GFP_ATOMIC */
    if (in_interrupt() || irqs_disabled()) {
        l_flags = GFP_ATOMIC;
    }

    puc_mem_space = dma_alloc_coherent(NULL, ul_size, &ul_dma_real_addr, l_flags);

    /* ??????cache?????????????? */
    *pul_phy_addr = (oal_uint32)ul_dma_real_addr;

    if (puc_mem_space == OAL_PTR_NULL) {
        return OAL_PTR_NULL;
    }

    return puc_mem_space;
}

/*
 * ?? ?? ??  : oal_mem_uncache_free
 * ????????  : ??????????(??cache)????????
 * ????????  : ????????mem??????(size),??????????????????(p_buf),
 *             ??????????????(ul_dma_addr)
 */
OAL_STATIC OAL_INLINE oal_void oal_mem_uncache_free(oal_uint32 ul_size, oal_void *p_buf, oal_uint32 ul_dma_addr)
{
    dma_free_coherent(NULL, ul_size, p_buf, ul_dma_addr);
}

/*
 * ?? ?? ??  : oal_dma_map_single
 * ????????  : ??cache????????cache????????????cache??????????????DDR
 * ????????  : ??????????:struct device,??????????:????cache??????????????????:cache??????size????
 *             ??????????:????(0:??????;1:??cache??????DDR;2:??cache????)
 * ?? ?? ??  : cache??????????????????????
 */
OAL_STATIC OAL_INLINE oal_uint32 oal_dma_map_single(struct device *pst_dev, oal_void *p_buf,
                                                    oal_uint32 ul_size, oal_direction_uint8 uc_dir)
{
    return dma_map_single(pst_dev, p_buf, ul_size, uc_dir);
}

/*
 * ?? ?? ??  : oal_dma_unmap_single
 * ????????  : ??????????????map????????????????????????????????????L1??L2??cache????????????map????????unmap
 * ????????  : ??????????:struct device,??????????:????cache????????????????????????????????:cache??????size????
 *             ??????????:????(0:??????;1:??cache??????DDR;2:??cache????)
 */
OAL_STATIC OAL_INLINE oal_void oal_dma_unmap_single(struct device *pst_dev, oal_dma_addr ul_addr,
                                                    oal_uint32 ul_size, oal_direction_uint8 uc_dir)
{
    dma_unmap_single(pst_dev, ul_addr, ul_size, uc_dir);
}
#endif

/*
 * ?? ?? ??  : oal_free
 * ????????  : ??????????????????????
 * ????????  : pbuf:????????????????
 */
OAL_STATIC OAL_INLINE oal_void oal_free(oal_void *p_buf)
{
    kfree(p_buf);
}
#endif /* end of oal_mm.h */

